/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"

#include "s3eFlurry.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*s3eFlurryStart_t)(const char* ID);
typedef       void(*s3eFlurryLogEvent_t)(const char* eventName, const s3eBool timed);
typedef       void(*s3eFlurryEndTimedEvent_t)(const char* eventName);
typedef       void(*s3eFlurryLogError_t)(const char* errorName, const char* errorMessage);
typedef       void(*s3eFlurrySetUserID_t)(const char* userID);
typedef       void(*s3eFlurrySetUserAge_t)(const uint8 age);
typedef       void(*s3eFlurrySetUserGender_t)(const s3eFlurryUserGender gender);
typedef       void(*s3eFlurrySetLocation_t)(s3eLocation* location);
typedef       void(*s3eFlurrySetSessionReportOnClose_t)(const s3eBool sendReportOnClose);
typedef       void(*s3eFlurrySetSessionReportOnPause_t)(const s3eBool sendReportOnPause);
typedef       void(*s3eFlurryAppCircleEnable_t)();
typedef       void(*s3eFlurrySetDefaultText_t)(const char* text);
typedef       void(*s3eFlurryShowAdBanner_t)(const s3eBool show);
typedef       void(*s3eFlurryShowOfferWall_t)();

/**
 * struct that gets filled in by s3eFlurryRegister
 */
typedef struct s3eFlurryFuncs
{
    s3eFlurryStart_t m_s3eFlurryStart;
    s3eFlurryLogEvent_t m_s3eFlurryLogEvent;
    s3eFlurryEndTimedEvent_t m_s3eFlurryEndTimedEvent;
    s3eFlurryLogError_t m_s3eFlurryLogError;
    s3eFlurrySetUserID_t m_s3eFlurrySetUserID;
    s3eFlurrySetUserAge_t m_s3eFlurrySetUserAge;
    s3eFlurrySetUserGender_t m_s3eFlurrySetUserGender;
    s3eFlurrySetLocation_t m_s3eFlurrySetLocation;
    s3eFlurrySetSessionReportOnClose_t m_s3eFlurrySetSessionReportOnClose;
    s3eFlurrySetSessionReportOnPause_t m_s3eFlurrySetSessionReportOnPause;
    s3eFlurryAppCircleEnable_t m_s3eFlurryAppCircleEnable;
    s3eFlurrySetDefaultText_t m_s3eFlurrySetDefaultText;
    s3eFlurryShowAdBanner_t m_s3eFlurryShowAdBanner;
    s3eFlurryShowOfferWall_t m_s3eFlurryShowOfferWall;
} s3eFlurryFuncs;

static s3eFlurryFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xabad5214, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE, "error loading extension: s3eFlurry");
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xabad5214, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eFlurryAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void s3eFlurryStart(const char* ID)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[0] func: s3eFlurryStart"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryStart(ID);
}

void s3eFlurryLogEvent(const char* eventName, const s3eBool timed)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[1] func: s3eFlurryLogEvent"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryLogEvent(eventName, timed);
}

void s3eFlurryEndTimedEvent(const char* eventName)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[2] func: s3eFlurryEndTimedEvent"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryEndTimedEvent(eventName);
}

void s3eFlurryLogError(const char* errorName, const char* errorMessage)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[3] func: s3eFlurryLogError"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryLogError(errorName, errorMessage);
}

void s3eFlurrySetUserID(const char* userID)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[4] func: s3eFlurrySetUserID"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetUserID(userID);
}

void s3eFlurrySetUserAge(const uint8 age)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[5] func: s3eFlurrySetUserAge"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetUserAge(age);
}

void s3eFlurrySetUserGender(const s3eFlurryUserGender gender)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[6] func: s3eFlurrySetUserGender"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetUserGender(gender);
}

void s3eFlurrySetLocation(s3eLocation* location)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[7] func: s3eFlurrySetLocation"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetLocation(location);
}

void s3eFlurrySetSessionReportOnClose(const s3eBool sendReportOnClose)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[8] func: s3eFlurrySetSessionReportOnClose"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetSessionReportOnClose(sendReportOnClose);
}

void s3eFlurrySetSessionReportOnPause(const s3eBool sendReportOnPause)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[9] func: s3eFlurrySetSessionReportOnPause"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetSessionReportOnPause(sendReportOnPause);
}

void s3eFlurryAppCircleEnable()
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[10] func: s3eFlurryAppCircleEnable"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryAppCircleEnable();
}

void s3eFlurrySetDefaultText(const char* text)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[11] func: s3eFlurrySetDefaultText"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurrySetDefaultText(text);
}

void s3eFlurryShowAdBanner(const s3eBool show)
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[12] func: s3eFlurryShowAdBanner"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryShowAdBanner(show);
}

void s3eFlurryShowOfferWall()
{
    IwTrace(FLURRY_VERBOSE, ("calling s3eFlurry[13] func: s3eFlurryShowOfferWall"));

    if (!_extLoad())
        return;

    g_Ext.m_s3eFlurryShowOfferWall();
}
